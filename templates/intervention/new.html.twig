{% extends 'base.html.twig' %}

{% block title %}Nouvelle Intervention{% endblock %}

{% block body %}

<div class="container mt-4">
    <div class="card shadow mb-4">
        <div class="card-body card-body-custom" id="printable-area">
            <h2 class="text-center mb-4"><i class="bi bi-tools"></i> FICHE D'INTERVENTION</h2>
           
            {{ form_start(form, {
                'action' : path('intervention_new', {id: produit.idProduit }), 'attr': {'id': 'intervention-form', 'class': 'needs-validation', 'novalidate': true}}) }}
                <div class="row">
                    <div class="col-md-4 mb-2">
                        {{ form_label(form.codeBarre, null, {'label_attr': {'class': 'label-bold'}}) }}
                        <div class="input-group">
                            {{ form_widget(form.codeBarre, {'attr': {'class': 'form-control', 'id': 'search-input'}}) }}
                        </div>
                    </div>
                    <div class="col-md-8 mb-2">
                        {% if produit and produit.codeBarre %}
                            <svg id="barcode"></svg>
                        {% endif %}
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-2">
                        {{ form_label(form.intervenant, null, {'label_attr': {'class': 'label-bold'}}) }}
                        {{ form_widget(form.intervenant, {'attr': {'class': 'form-control', 'readonly': true}}) }}
                    </div>
                    <div class="col-md-6 mb-2">
                        {{ form_label(form.dateIntervention, null, {'label_attr': {'class': 'label-bold'}}) }}
                        {{ form_widget(form.dateIntervention, {'attr': {'class': 'form-control'}}) }}
                    </div>
                </div>

                <div class="accordion" id="productAccordion">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingOne">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                Informations du Produit
                            </button>
                        </h2>
                        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#productAccordion">
                            <div class="accordion-body">
                                
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.categorie, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.categorie, {'attr': {'class': 'form-control', 'readonly': true}}) }}
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        {{ form_label(form.marque, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.marque, {'attr': {'class': 'form-control', 'readonly': true}}) }}
                                    </div>
                                    <div class="col-md-2 mb-2">
                                        {{ form_label(form.taille, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.taille, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.modele, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.modele, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.numeroSerie, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.numeroSerie, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.cpu, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.cpu, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.frequenceCpu, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.frequenceCpu, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.ram, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.ram, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.typeRam, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.typeRam, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.stockage, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.stockage, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.typeStockage, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.typeStockage, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.carteGraphique, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.carteGraphique, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.memoireVideo, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.memoireVideo, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.systemeExploitation, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.systemeExploitation, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.versionSe, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.versionSe, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.codeEtagere, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.codeEtagere, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.statut, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.statut, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-4 mb-2">
                        <div class="form-check">
                            {{ form_widget(form.miseAJourWindows, {'attr': {'class': 'form-check-input'}}) }}
                            {{ form_label(form.miseAJourWindows, null, {'label_attr': {'class': 'label-bold form-check-label'}}) }}
                        </div>
                        <div class="form-check">
                            {{ form_widget(form.miseAJourPilotes, {'attr': {'class': 'form-check-input'}}) }}
                            {{ form_label(form.miseAJourPilotes, null, {'label_attr': {'class': 'label-bold form-check-label'}}) }}
                        </div>
                        <div class="form-check">
                            {{ form_widget(form.autresLogiciels, {'attr': {'class': 'form-check-input'}}) }}
                            {{ form_label(form.autresLogiciels, null, {'label_attr': {'class': 'label-bold form-check-label'}}) }}
                        </div>
                    </div>
                    <div class="col-md-8 mb-2">
                        {{ form_label(form.commentaire, null, {'label_attr': {'class': 'label-bold'}}) }}
                        {{ form_widget(form.commentaire, {'attr': {'class': 'form-control'}}) }}
                    </div>
                </div>
                

            {{ form_end(form) }}
            
            <div id="printable-image-area" class="text-center mt-4 d-none">
                <canvas id="capture-canvas" style="max-width: 100%;"></canvas>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="text-center col-md-3">
                <button type="button" id="save-button" class="btn btn-primary mt-3">
                    <span class="spinner-border spinner-border-sm d-none" id="loading-spinner"></span>
                    <i class="bi bi-save"></i> Enregistrer
                </button>
            </div>
            <div class="text-center col-md-3">
                <button type="button" id="print-button" class="btn btn-info mt-3 no-print">
                    <i class="bi bi-printer"></i> Imprimer
                </button>
            </div>
            <div class="text-center col-md-3">
                <a href="{{ path('app_produit') }}" class="btn btn-secondary mt-3 no-print">
                    <i class="bi bi-x-circle"></i> Annuler
                </a>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        const CATEGORIES_OBLIGATOIRES = [
            'ordinateur', 'pc', 'mini pc', 'portable', 'all in one', 'unité centrale', 'mac'
        ];

        function isFormValid() {
            const categorie = document.querySelector('#intervention_categorie');
            const catValue = categorie?.value?.trim()?.toLowerCase();
            
            // Vérifier si la catégorie est dans la liste des catégories obligatoires
            const isCategorieObligatoire = categorie && 
                                        CATEGORIES_OBLIGATOIRES.some(c => 
                                            catValue.includes(c.toLowerCase()));
            
            // Si la catégorie n'est pas obligatoire, on n'a pas besoin de vérifier 
            // tous les champs techniques et on peut considérer le formulaire comme valide
            if (!isCategorieObligatoire) {
                return true; // Permettre l'enregistrement pour les catégories non-informatiques
            }
            
            let valid = true;
            let champsManquants = [];
            
            // Liste des champs à vérifier (uniquement si catégorie est un ordinateur)
            const champs = {
                'Modèle': '#intervention_modele',
                'N° Série': '#intervention_numeroSerie',
                'CPU': '#intervention_cpu',
                'Fréquence CPU': '#intervention_frequenceCpu',
                'RAM': '#intervention_ram',
                'Type de RAM': '#intervention_typeRam',
                'Stockage': '#intervention_stockage',
                'Type de Stockage': '#intervention_typeStockage',
                'Carte Graphique': '#intervention_carteGraphique',
                'Mémoire Vidéo': '#intervention_memoireVideo',
                'Système': '#intervention_systemeExploitation',
                'Version SE': '#intervention_versionSe',
                'Étagère': '#intervention_codeEtagere',
                'Statut': '#intervention_statut'
            };

            // Vérification de chaque champ pour les catégories obligatoires
            for (const [label, selector] of Object.entries(champs)) {
                const field = document.querySelector(selector);
                if (field && !field.value.trim()) {
                    field.classList.add('is-invalid');
                    
                    // Ajouter une bordure rouge plus visible
                    field.style.borderColor = '#dc3545';
                    field.style.boxShadow = '0 0 0 0.2rem rgba(220, 53, 69, 0.25)';
                    
                    // Ajouter un message d'erreur sous le champ
                    if (!field.nextElementSibling || !field.nextElementSibling.classList.contains('invalid-feedback')) {
                        const feedback = document.createElement('div');
                        feedback.classList.add('invalid-feedback');
                        feedback.textContent = `Le champ ${label} est requis`;
                        field.parentNode.insertBefore(feedback, field.nextSibling);
                    }
                    
                    champsManquants.push(label);
                    valid = false;
                } else if (field) {
                    field.classList.remove('is-invalid');
                    field.style.borderColor = '';
                    field.style.boxShadow = '';
                    
                    // Supprimer le message d'erreur s'il existe
                    const feedback = field.nextElementSibling;
                    if (feedback && feedback.classList.contains('invalid-feedback')) {
                        feedback.remove();
                    }
                }
            }

            // Alerter l'utilisateur si des champs sont manquants
            if (!valid) {
                // Faire défiler jusqu'au premier champ invalide
                const firstInvalid = document.querySelector('.is-invalid');
                if (firstInvalid) {
                    firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    setTimeout(() => firstInvalid.focus(), 500);
                }
                
                Swal.fire({
                    icon: 'error',
                    title: 'Champs obligatoires manquants',
                    html: `
                        <p>Merci de compléter les champs suivants :</p>
                        <ul style="text-align: left; max-height: 200px; overflow-y: auto; padding-left: 20px;">
                            ${champsManquants.map(c => `<li style="margin-bottom: 8px; color: #dc3545;"><strong>${c}</strong></li>`).join('')}
                        </ul>
                    `,
                    confirmButtonText: 'Corriger',
                    confirmButtonColor: '#dc3545'
                });
            }

            return valid;
        }

        {% if produit and produit.codeBarre %}
            // Configuration améliorée du code-barres pour meilleure impression
            JsBarcode("#barcode", "{{ produit.codeBarre }}", {
                format: "CODE39",
                displayValue: true,
                fontSize: 14,          // Texte plus grand
                height: 50,            // Barres plus hautes
                width: 2,              // Barres plus larges
                margin: 10,            // Marge autour du code
                background: "#ffffff", // Fond blanc
                lineColor: "#000000",  // Barres noires
                textMargin: 8,         // Espace entre code et texte
                font: "monospace",     // Police plus adaptée à l'impression
                textAlign: "center"    // Centrage du texte
            });
        {% endif %}

        document.getElementById('save-button').addEventListener('click', function () {
            const form = document.querySelector('#intervention-form');
            const spinner = document.getElementById('loading-spinner');
            const saveBtn = this;

            if (!isFormValid()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Champs requis manquants',
                    text: 'Merci de compléter tous les champs nécessaires avant d\'enregistrer.',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#dc3545'
                });
                return;
            }

            spinner.classList.remove('d-none');
            saveBtn.disabled = true;

            const formData = new FormData(form);

            fetch(form.getAttribute('action'), {
                method: 'POST',
                body: formData,
            })
            .then(response => {
                if (!response.ok) throw new Error("Erreur lors de l'enregistrement");
                return response.text();
            })
            .then(() => {
                spinner.classList.add('d-none');

                // SweetAlert pour succès
                Swal.fire({
                    title: 'Enregistrement réussi !',
                    text: 'L\'intervention a été enregistrée avec succès',
                    icon: 'success',
                    timer: 2500,
                    
                });

                // Transformer le bouton en lien de retour
                saveBtn.innerHTML = "<i class='bi bi-arrow-left-circle'></i> Retour";
                saveBtn.classList.remove('btn-primary', 'btn-success');
                saveBtn.classList.add('btn-secondary');
                saveBtn.disabled = false;
                saveBtn.onclick = function () {
                    window.location.href = "{{ path('app_produit') }}";
                };
            })
            .catch(error => {
                console.error(error);
                spinner.classList.add('d-none');
                saveBtn.disabled = false;
                
                // SweetAlert pour erreur
                Swal.fire({
                    title: 'Erreur !',
                    text: 'L\'enregistrement a échoué. Veuillez réessayer.',
                    icon: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#dc3545'
                });
            });
        });

        document.getElementById('print-button').addEventListener('click', function () {
            if (!isFormValid()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Champs requis manquants',
                    text: 'Merci de compléter tous les champs nécessaires avant impression.',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#dc3545'
                });
                return;
            }

            Swal.fire({
                title: 'Enregistrement en cours...',
                text: 'Veuillez patienter pendant l\'enregistrement.',
                timer: 2500,
                allowOutsideClick: false,
                didOpen: () => Swal.showLoading()
            }).then(() => {
                // Afficher tous les accordéons avant impression
                document.querySelectorAll('.accordion-collapse').forEach(collapse => collapse.classList.add('show'));
                const form = document.querySelector('#intervention-form');
                const formData = new FormData(form);

                fetch(form.getAttribute('action'), {
                    method: 'POST',
                    body: formData,
                })
                .then(() => {
                    let dateStr = new Date().toISOString().slice(0, 10).replace(/-/g, '');
                    let codeProduit = "{{ produit ? produit.codeBarre|default('XXXXX') : 'XXXXX' }}";
                    let idIntervenant = "{{ app.user ? app.user.id : 'XXX' }}";

                    codeProduit = codeProduit.replace(/[^a-zA-Z0-9]/g, '');
                    let fileName = `${dateStr}_${codeProduit}_${idIntervenant}`;

                    const originalTitle = document.title;
                    document.title = fileName;

                    // Variable pour détecter l'état de l'impression
                    let printState = 'pending'; // 'pending', 'completed', 'cancelled'

                    // Gestionnaire après impression (succès)
                    window.onafterprint = function() {
                        document.title = originalTitle;
                        
                        // Seulement marquer comme complété si ce n'est pas déjà annulé
                        if (printState === 'pending') {
                            printState = 'completed';
                            
                            Swal.fire({
                                title: 'Impression terminée',
                                text: 'Redirection vers la liste des produits...',
                                icon: 'success',
                                confirmButtonText: 'OK',
                                confirmButtonColor: '#61a444',
                                timer: 1000,
                                timerProgressBar: true
                            }).then(() => {
                                // Redirection vers la liste des produits
                                window.location.href = "{{ path('app_produit') }}";
                            });
                        }
                    };

                    // Lancer l'impression
                    setTimeout(() => {
                        window.print();
                        
                        // Détection d'annulation: si après un certain délai, l'état n'est ni complété ni annulé
                        setTimeout(() => {
                            if (printState === 'pending') {
                                printState = 'cancelled';
                                document.title = originalTitle;
                                
                                Swal.fire({
                                    title: 'Impression annulée',
                                    text: 'Vous avez annulé l\'impression',
                                    icon: 'info',
                                    confirmButtonText: 'OK',
                                    confirmButtonColor: '#6c757d'
                                });
                                // Pas de redirection pour rester sur la même page
                            }
                        }, 1000); // Délai réduit pour détecter plus rapidement l'annulation
                    }, 300);
                })
                .catch(() => {
                    Swal.fire({
                        title: 'Erreur !',
                        text: 'L\'enregistrement a échoué. Impression annulée.',
                        icon: 'error',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#dc3545'
                    });
                });
            });
        });
    });
</script>

<script src="{{ asset('js/scan.js') }}"></script>
<audio id="scan-beep" src="{{ asset('sounds/beep.mp3') }}" preload="auto"></audio>
{% endblock %}
