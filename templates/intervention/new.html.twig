{% extends 'base.html.twig' %}

{% block title %}Nouvelle Intervention{% endblock %}
{% block body %}
<style>

@media print {
    @page {
        size: A4 portrait;
        margin: 5mm 10mm;
    }

    html, body {
        height: auto !important;
        overflow: hidden !important;
        font-size: 12px !important;
        background: white !important;
    }

    body * {
        visibility: hidden;
    }

    #printable-area, #printable-area * {
        visibility: visible;
        color: black !important;
    }

    #printable-area {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        padding: 0.3cm;
        background: white !important;
    }

    .no-print,
    .container > .row:last-child,
    .btn,
    #printable-image-area,
    #save-button,
    #loading-spinner,
    .invalid-feedback {
        display: none !important;
    }

    .row {
        display: flex !important;
        flex-wrap: wrap !important;
        margin: 0 -5px 4px -5px !important;
        width: 100% !important;
        clear: both !important;
    }

    .col-md-2, .col-md-3, .col-md-4, .col-md-6, .col-md-8 {
        float: left !important;
        padding: 0 5px !important;
        margin-bottom: 4px !important;
        box-sizing: border-box !important;
    }

    .col-md-2 { width: 16.66% !important; }
    .col-md-3 { width: 25% !important; }
    .col-md-4 { width: 33.33% !important; }
    .col-md-6 { width: 50% !important; }
    .col-md-8 { width: 66.66% !important; }

    .form-control {
        border: 1px solid #999 !important;
        background-color: white !important;
        font-size: 14px !important;
        padding: 1px 3px !important;
        height: 24px !important;
        width: 100% !important;
    }

    .form-check {
        padding-left: 20px !important;
        margin-bottom: 4px !important;
        page-break-inside: avoid !important;
    }

    .form-check-input {
        width: 14px !important;
        height: 14px !important;
    }

    label, .form-check-label, .label-bold {
        font-size: 11px !important;
        font-weight: bold !important;
        margin-bottom: 4px !important;
    }

    h2 {
        font-size: 18px !important;
        margin-bottom: 12px !important;
        text-align: center !important;
        page-break-after: avoid !important;
    }

    .accordion {
        margin: 0 !important;
        padding: 0 !important;
    }

    .accordion-item {
        border: none !important;
        margin: 0 !important;
        padding: 0 !important;
        page-break-inside: avoid !important;
    }

    .accordion-button {
        background: none !important;
        color: black !important;
        font-weight: bold !important;
        font-size: 14px !important;
        padding: 5px 0 !important;
        margin-bottom: 10px !important;
    }

    .accordion-button::after {
        display: none !important;
    }

    .accordion-collapse {
        display: block !important;
    }

    svg#barcode {
        max-height: 45px !important;
        margin: 5px 0 !important;
        display: block !important;
    }

    .card {
        border: none !important;
        box-shadow: none !important;
    }

    .card-body {
        padding: 0 !important;
    }
}

/* Style pour les astérisques des champs requis */
.label-bold[data-field].required::after {
    content: " *";
    color: red;
    font-weight: bold;
}
</style>

<div class="container mt-4">
    <div class="card shadow mb-4">
        <div class="card-body card-body-custom" id="printable-area">
            <h2 class="text-center mb-4"><i class="bi bi-tools" alt="Icône outils"></i> FICHE D'INTERVENTION</h2>
           
            {{ form_start(form, {
                'action' : path('intervention_new', {id: produit.idProduit }), 'attr': {'id': 'intervention-form', 'class': 'needs-validation', 'novalidate': true}}) }}
                <div class="row">
                    <div class="col-md-4 mb-2">
                        {{ form_label(form.codeBarre, null, {'label_attr': {'class': 'label-bold'}}) }}
                        <div class="input-group">
                            {{ form_widget(form.codeBarre, {'attr': {'class': 'form-control', 'id': 'search-input'}}) }}
                        </div>
                    </div>
                    
                    <div class="col-md-8 mb-2">
                        {% if produit and produit.codeBarre %}
                            <svg id="barcode"></svg>
                        {% endif %}
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-2">
                        {{ form_label(form.intervenant, null, {'label_attr': {'class': 'label-bold'}}) }}
                        {{ form_widget(form.intervenant, {'attr': {'class': 'form-control', 'readonly': true}}) }}
                    </div>
                    <div class="col-md-6 mb-2">
                        {{ form_label(form.dateIntervention, null, {'label_attr': {'class': 'label-bold'}}) }}
                        {{ form_widget(form.dateIntervention, {'attr': {'class': 'form-control'}}) }}
                    </div>
                </div>

                <div class="accordion" id="productAccordion">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingOne">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                Informations du Produit
                            </button>
                        </h2>
                        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#productAccordion">
                            <div class="accordion-body">
                                
                                <div class="row ">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.categorie, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.categorie, {'attr': {'class': 'form-control', 'readonly': true}}) }}
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        {{ form_label(form.marque, null, {'label_attr': {'class': 'label-bold'}}) }}
                                        {{ form_widget(form.marque, {'attr': {'class': 'form-control', 'readonly': true}}) }}
                                    </div>
                                    <div class="col-md-2 mb-2">
                                        {{ form_label(form.taille, null, {'label_attr': {'class': 'label-bold' , 'data-field': 'taille'}}) }}
                                        {{ form_widget(form.taille, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.modele, null, {'label_attr': {'class': 'label-bold', 'data-field': 'modele'}}) }}
                                        {{ form_widget(form.modele, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.numeroSerie, null, {'label_attr': {'class': 'label-bold', 'data-field': 'numeroSerie'}}) }}
                                        {{ form_widget(form.numeroSerie, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.cpu, null, {'label_attr': {'class': 'label-bold', 'data-field': 'cpu'}}) }}
                                        {{ form_widget(form.cpu, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.frequenceCpu, null, {'label_attr': {'class': 'label-bold', 'data-field': 'frequenceCpu'}}) }}
                                        {{ form_widget(form.frequenceCpu, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.ram, null, {'label_attr': {'class': 'label-bold', 'data-field': 'ram'}}) }}
                                        {{ form_widget(form.ram, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.typeRam, null, {'label_attr': {'class': 'label-bold', 'data-field': 'typeRam'}}) }}
                                        {{ form_widget(form.typeRam, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.stockage, null, {'label_attr': {'class': 'label-bold', 'data-field': 'stockage'}}) }}
                                        {{ form_widget(form.stockage, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.typeStockage, null, {'label_attr': {'class': 'label-bold', 'data-field': 'typeStockage'}}) }}
                                        {{ form_widget(form.typeStockage, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.carteGraphique, null, {'label_attr': {'class': 'label-bold', 'data-field': 'carteGraphique'}}) }}
                                        {{ form_widget(form.carteGraphique, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.memoireVideo, null, {'label_attr': {'class': 'label-bold', 'data-field': 'memoireVideo'}}) }}
                                        {{ form_widget(form.memoireVideo, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.systemeExploitation, null, {'label_attr': {'class': 'label-bold', 'data-field': 'systemeExploitation'}}) }}
                                        {{ form_widget(form.systemeExploitation, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.versionSe, null, {'label_attr': {'class': 'label-bold', 'data-field': 'versionSe'}}) }}
                                        {{ form_widget(form.versionSe, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.codeEtagere, null, {'label_attr': {'class': 'label-bold', 'data-field': 'codeEtagere'}}) }}
                                        {{ form_widget(form.codeEtagere, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        {{ form_label(form.status, null, {'label_attr': {'class': 'label-bold', 'data-field': 'status'}}) }}
                                        {{ form_widget(form.status, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-4 mb-2">
                        <div class="form-check">
                            {{ form_widget(form.miseAJourWindows, {'attr': {'class': 'form-check-input'}}) }}
                            {{ form_label(form.miseAJourWindows, null, {'label_attr': {'class': 'label-bold form-check-label'}}) }}
                        </div>
                        <div class="form-check">
                            {{ form_widget(form.miseAJourPilotes, {'attr': {'class': 'form-check-input'}}) }}
                            {{ form_label(form.miseAJourPilotes, null, {'label_attr': {'class': 'label-bold form-check-label'}}) }}
                        </div>
                        <div class="form-check">
                            {{ form_widget(form.autresLogiciels, {'attr': {'class': 'form-check-input'}}) }}
                            {{ form_label(form.autresLogiciels, null, {'label_attr': {'class': 'label-bold form-check-label'}}) }}
                        </div>
                    </div>
                    <div class="col-md-8 mb-2">
                        {{ form_label(form.commentaire, null, {'label_attr': {'class': 'label-bold'}}) }}
                        {{ form_widget(form.commentaire, {'attr': {'class': 'form-control'}}) }}
                    </div>
                </div>
                
        <div class="row justify-content-center ">
            <div class="text-start col-md-3">
                <button type="button" id="save-button" class="btn btn-primary mt-3 w-100 no-print">
                    <span class="spinner-border spinner-border-sm d-none" id="loading-spinner"></span>
                    <i class="bi bi-save-fill ms-1" alt="Icône sauvegarder"></i> Enregistrer
                </button>
            </div>
            
            <div class="text-center col-md-3" id="print-button-container" style="display: none;">
                <button type="button" id="print-button" class="btn btn-info mt-3 no-print">
                    <i class="bi bi-printer" alt="Icône imprimer"></i> Imprimer
                </button>
            </div>
                
            <div class="text-center col-md-3">
                <a href="{{ path('app_produit') }}" class="btn btn-secondary mt-3 no-print">
                    <i class="bi bi-x-circle me-1" alt="Icône annuler"></i> Annuler
                </a>
            </div>
        </div>
            {{ form_end(form) }}

        
            
            <div id="printable-image-area" class="text-center mt-4 d-none">
                <canvas id="capture-canvas" style="max-width: 100%;"></canvas>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        function isFormValid() {
            const CATEGORIES_OBLIGATOIRES = [
                'ordinateur', 'pc', 'mini pc', 'portable', 'all in one', 'unité centrale', 'mac'
            ];

            const categorie = document.querySelector('#intervention_categorie');
            const catValue = categorie?.value?.trim()?.toLowerCase();

            // Nettoyer tous les astérisques existants
            document.querySelectorAll('.label-bold').forEach(label => {
                label.classList.remove('required');
            });

            // Pour les ordinateurs
            if (CATEGORIES_OBLIGATOIRES.some(c => catValue?.includes(c))) {
                const champsOrdinateur = [
                    'modele', 'numeroSerie', 'cpu', 'frequenceCpu',
                    'ram', 'typeRam', 'stockage', 'typeStockage',
                    'carteGraphique', 'memoireVideo', 'systemeExploitation', 
                    'versionSe', 'codeEtagere', 'status'
                ];
                champsOrdinateur.forEach(field => {
                    const label = document.querySelector(`[data-field="${field}"]`);
                    if (label) label.classList.add('required');
                });
            }
            // Pour les écrans
            else if (catValue?.includes('ecran')) {
                const champsEcran = ['taille', 'codeEtagere', 'status', 'numeroSerie'];
                champsEcran.forEach(field => {
                    const label = document.querySelector(`[data-field="${field}"]`);
                    if (label) label.classList.add('required');
                });
            }

            const isCategorieObligatoire = categorie && 
                CATEGORIES_OBLIGATOIRES.some(c => catValue?.includes(c.toLowerCase()));

            let valid = true;
            let champsManquants = [];

            // Champs toujours obligatoires (toutes catégories)
            const champsObligatoiresCommuns = {
                'Étagère': '#intervention_codeEtagere',
                'status': '#intervention_status'
            };

            for (const [label, selector] of Object.entries(champsObligatoiresCommuns)) {
                const field = document.querySelector(selector);
                if (field && !field.value.trim()) {
                    field.classList.add('is-invalid');
                    field.style.borderColor = '#dc3545';
                    field.style.boxShadow = '0 0 0 0.2rem rgba(220, 53, 69, 0.25)';
                    if (!field.nextElementSibling || !field.nextElementSibling.classList.contains('invalid-feedback')) {
                        const feedback = document.createElement('div');
                        feedback.classList.add('invalid-feedback');
                        feedback.textContent = `Le champ ${label} est requis`;
                        field.parentNode.insertBefore(feedback, field.nextSibling);
                    }
                    champsManquants.push(label);
                    valid = false;
                } else if (field) {
                    field.classList.remove('is-invalid');
                    field.style.borderColor = '';
                    field.style.boxShadow = '';
                    const feedback = field.nextElementSibling;
                    if (feedback && feedback.classList.contains('invalid-feedback')) {
                        feedback.remove();
                    }
                }
            }

            // Si catégorie non informatique, pas besoin des champs techniques
            if (!isCategorieObligatoire) {
                return valid;
            }

            // Champs techniques requis uniquement pour les catégories PC
            const champsTechniques = {
                'Modèle': '#intervention_modele',
                'N° Série': '#intervention_numeroSerie',
                'CPU': '#intervention_cpu',
                'Fréquence CPU': '#intervention_frequenceCpu',
                'RAM': '#intervention_ram',
                'Type de RAM': '#intervention_typeRam',
                'Stockage': '#intervention_stockage',
                'Type de Stockage': '#intervention_typeStockage',
                'Carte Graphique': '#intervention_carteGraphique',
                'Mémoire Vidéo': '#intervention_memoireVideo',
                'Système': '#intervention_systemeExploitation',
                'Version SE': '#intervention_versionSe'
            };

            for (const [label, selector] of Object.entries(champsTechniques)) {
                const field = document.querySelector(selector);
                if (field && !field.value.trim()) {
                    field.classList.add('is-invalid');
                    field.style.borderColor = '#dc3545';
                    field.style.boxShadow = '0 0 0 0.2rem rgba(220, 53, 69, 0.25)';
                    if (!field.nextElementSibling || !field.nextElementSibling.classList.contains('invalid-feedback')) {
                        const feedback = document.createElement('div');
                        feedback.classList.add('invalid-feedback');
                        feedback.textContent = `Le champ ${label} est requis`;
                        field.parentNode.insertBefore(feedback, field.nextSibling);
                    }
                    champsManquants.push(label);
                    valid = false;
                } else if (field) {
                    field.classList.remove('is-invalid');
                    field.style.borderColor = '';
                    field.style.boxShadow = '';
                    const feedback = field.nextElementSibling;
                    if (feedback && feedback.classList.contains('invalid-feedback')) {
                        feedback.remove();
                    }
                }
            }

            // Message global si non valide
            if (!valid) {
                const firstInvalid = document.querySelector('.is-invalid');
                if (firstInvalid) {
                    firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    setTimeout(() => firstInvalid.focus(), 500);
                }

                Swal.fire({
                    icon: 'error',
                    title: 'Champs obligatoires manquants',
                    html: `
                        <p>Merci de compléter les champs suivants :</p>
                        <ul style="text-align: left; max-height: 200px; overflow-y: auto; padding-left: 20px;">
                            ${champsManquants.map(c => `<li style="margin-bottom: 8px; color: #dc3545;"><strong>${c}</strong></li>`).join('')}
                        </ul>
                    `,
                    confirmButtonText: 'Corriger',
                    confirmButtonColor: '#dc3545'
                });
            }

            return valid;
        }


        {% if produit and produit.codeBarre %}
            // Configuration améliorée du code-barres pour meilleure impression
            JsBarcode("#barcode", "{{ produit.codeBarre }}", {
                format: "CODE39",
                displayValue: true,
                fontSize: 14,          // Texte plus grand
                height: 50,            // Barres plus hautes
                width: 2,              // Barres plus larges
                margin: 10,            // Marge autour du code
                background: "#ffffff", // Fond blanc
                lineColor: "#000000",  // Barres noires
                textMargin: 8,         // Espace entre code et texte
                font: "monospace",     // Police plus adaptée à l'impression
                textAlign: "center"    // Centrage du texte
            });
        {% endif %}

        document.getElementById('save-button').addEventListener('click', function () {
            const form = document.querySelector('#intervention-form');
            const spinner = document.getElementById('loading-spinner');
            const saveBtn = this;
            const printButtonContainer = document.getElementById('print-button-container');

            if (!isFormValid()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Champs requis manquants',
                    text: 'Merci de compléter tous les champs nécessaires avant d\'enregistrer.',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#dc3545'
                });
                return;
            }

            spinner.classList.remove('d-none');
            saveBtn.disabled = true;

            const formData = new FormData(form);

            fetch(form.getAttribute('action'), {
                method: 'POST',
                body: formData,
            })
            .then(response => {
                if (!response.ok) throw new Error("Erreur lors de l'enregistrement");
                return response.text();
            })
            .then(() => {
                spinner.classList.add('d-none');

                // SweetAlert pour succès
                Swal.fire({
                    title: 'Enregistrement réussi !',
                    text: 'L\'intervention a été enregistrée avec succès',
                    icon: 'success',
                    timer: 2500,
                    showConfirmButton: false
                });

                // Afficher le bouton d'impression après succès
                const printButtonContainer = document.getElementById('print-button-container');
                if (printButtonContainer) {
                    printButtonContainer.style.display = 'block';
                }
                
                // Transformer le bouton en lien de retour
                saveBtn.innerHTML = "<i class='bi bi-arrow-left-circle'></i> Retour";
                saveBtn.classList.remove('btn-primary');
                saveBtn.classList.add('btn-secondary');
                saveBtn.disabled = false;
                saveBtn.onclick = function () {
                    window.location.href = "{{ path('app_produit') }}";
                };
            })
            .catch(error => {
                console.error(error);
                spinner.classList.add('d-none');
                saveBtn.disabled = false;
                
                // SweetAlert pour erreur
                Swal.fire({
                    title: 'Erreur !',
                    text: 'L\'enregistrement a échoué. Veuillez réessayer.',
                    icon: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#dc3545'
                });
            });
        });

        document.getElementById('print-button').addEventListener('click', function () {
            if (!isFormValid()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Champs requis manquants',
                    text: 'Merci de compléter tous les champs nécessaires avant impression.',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#dc3545'
                });
                return;
            }

            document.querySelectorAll('.accordion-collapse').forEach(collapse => collapse.classList.add('show'));

            let now = new Date();
            let dateStr = now.toISOString().slice(0, 10).replace(/-/g, '');
            let heureMinute = now.getHours().toString().padStart(2, '0') + now.getMinutes().toString().padStart(2, '0');
            let codeProduit = document.querySelector('#intervention_codeBarre')?.value || "{{ produit ? produit.codeBarre|default('XXXXX') : 'XXXXX' }}";
            let idIntervenant = "{{ app.user ? app.user.id : 'XXX' }}";

            codeProduit = codeProduit.replace(/[^a-zA-Z0-9]/g, '');
            let fileName = `${dateStr}_${heureMinute}_${codeProduit}_${idIntervenant}`;


            const originalTitle = document.title;
            document.title = fileName;

            setTimeout(() => {
                window.print();
                document.title = originalTitle;
            }, 300);
        });

    });
</script>

<script src="{{ asset('js/scan.js') }}"></script>
<audio id="scan-beep" src="{{ asset('sounds/beep.mp3') }}" preload="auto"></audio>
{% endblock %}